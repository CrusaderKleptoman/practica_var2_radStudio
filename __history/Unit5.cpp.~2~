<<<<<<< Updated upstream
//---------------------------------------------------------------------------

#include<vcl.h>
#include<vector>
#include<random>
#include<time.h>
#include<cmath>
#pragma hdrstop
#include <string>
#include <iostream>


using namespace std;
#define M_PI 3.14159265358979323846

#include "Unit5.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm5 *Form5;
//---------------------------------------------------------------------------
__fastcall TForm5::TForm5(TComponent* Owner)
	: TForm(Owner)
{
StaticTextPoint1X->Caption = "";
StaticTextPoint1Y->Caption = "";

StaticTextPoint2X->Caption = "";
StaticTextPoint2Y->Caption = "";

StaticTextPoint3X->Caption = "";
StaticTextPoint3Y->Caption = "";

StaticTextSCircle->Caption = "";
StaticTextSTriangle->Caption = "";
StaticTextSDifference->Caption = "";
}

double minRaz;
unsigned short pointNumber[3] = {0, 1, 2};
bool trianglExists = false;
int N = 0;
vector<TPoint> points;



void __fastcall TForm5::PaintBox1MouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
	   /*	if (Button == mbLeft) {
			points[N].x = X;
			points[N].y = Y;
			N++;
			EditX->Text = PaintBox1->Height;
			EditY->Text = PaintBox1->Width;
		}*/
}
//---------------------------------------------------------------------------

double line(TPoint point1, TPoint point2)
{
    return sqrt(pow((point1.x - point2.x), 2) + pow((point1.y - point2.y), 2));
}

double S_circle(TPoint point1, TPoint point2, TPoint point3)
{
	double lineA = line(point1, point2);
	double lineB = line(point1, point3);
	double lineC = line(point2, point3);
	double halfPerim = (lineA + lineB + lineC) / 2;
	double R = (lineA * lineB * lineC) / (4 * sqrt(halfPerim * (halfPerim - lineA) * (halfPerim - lineB) * (halfPerim - lineC)));
    return M_PI * pow(R, 2);
}

double S_triangl(TPoint point1, TPoint point2, TPoint point3)
{
	TPoint vectAB; vectAB.x = point2.x - point1.x; vectAB.y = point2.y - point1.y;
	TPoint vectAC; vectAC.x = point3.x - point1.x; vectAC.y = point3.y - point1.y;
    return abs((vectAB.x * vectAC.y - vectAC.x * vectAB.y)) / 2;
}

void DrawCircle(TPaintBox *PaintBox1, TPoint point1, TPoint point2, TPoint point3)
{
	double Ax = point2.x - point1.x;
	double Ay = point2.y - point1.y;
	double Bx = point3.x - point1.x;
	double By = point3.y - point1.y;
	double E = Ax * (point1.x + point2.x) + Ay * (point1.y + point2.y);
	double F = Bx * (point1.x + point3.x) + By * (point1.y + point3.y);
	double G = 2 * (Ax * (point3.y - point2.y) - Ay * (point3.x- point2.x));
	double Cx = (By * E - Ay * F) / G;
	double Cy = (Ax * F - Bx * E) / G;
	double R = sqrt(pow(point1.x - Cx, 2) + pow(point1.y - Cy, 2));

	PaintBox1->Canvas->Pen->Style = psSolid;
	PaintBox1->Canvas->MoveTo(Cx+R, Cy);
	PaintBox1->Canvas->AngleArc(Cx, Cy, R, 0, 360);
}

void Logic(TPaintBox *PaintBox1, vector<TPoint> points) {
	 if (points.size() >= 3) {
	 PaintBox1->Canvas->Pen->Color = clRed;
		minRaz = abs(S_circle(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]) - S_triangl(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]));
		for (int i = 0; i < points.size(); i++) {
			for (int j = i+1; j < points.size(); j++) {
				for (int i1 = j+1; i1 < points.size(); i1++) {
					if (S_triangl(points[i], points[j], points[i1]) <= 0)
					{
						//std::cout << "Треугольник и круг по данным точкам не существуют\n";
						continue;
					}

					if (abs(S_circle(points[i], points[j], points[i1]) - S_triangl(points[i], points[j], points[i1])) < minRaz)
					{
						double circle = S_circle(points[i], points[j], points[i1]);
						double triangle = S_triangl(points[i], points[j], points[i1]);
						minRaz = abs(circle - triangle);
						cout<<minRaz;
						cout<<abs(S_circle(points[i], points[j], points[i1]) - S_triangl(points[i], points[j], points[i1]));
						pointNumber[0] = i;
						pointNumber[1] = j;
						pointNumber[2] = i1;

					}

					DrawCircle(PaintBox1, points[i], points[j], points[i1]);
					PaintBox1->Canvas->MoveTo(points[i].x, points[i].y);
					PaintBox1->Canvas->LineTo(points[j].x, points[j].y);
					PaintBox1->Canvas->LineTo(points[i1].x, points[i1].y);
					PaintBox1->Canvas->LineTo(points[i].x, points[i].y);
					trianglExists = true;
				}
			}
		}
	 }

	 if(trianglExists)
	 {

		PaintBox1->Canvas->Pen->Color = clGreen;
		DrawCircle(PaintBox1, points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]);
		PaintBox1->Canvas->MoveTo(points[pointNumber[0]].x, points[pointNumber[0]].y);
		PaintBox1->Canvas->LineTo(points[pointNumber[1]].x, points[pointNumber[1]].y);
		PaintBox1->Canvas->LineTo(points[pointNumber[2]].x, points[pointNumber[2]].y);
		PaintBox1->Canvas->LineTo(points[pointNumber[0]].x, points[pointNumber[0]].y);

	 }
}

void Draw(TPaintBox *PaintBox1) {
	PaintBox1->Canvas->Brush->Color = clWhite;
	PaintBox1->Canvas->Pen->Style = psDot;
    PaintBox1->Canvas->Pen->Color = clBlack;
	for (int i = 0; i < PaintBox1->Width; i += 50) {
		PaintBox1->Canvas->MoveTo(i, 0);
		PaintBox1->Canvas->LineTo(i, PaintBox1->Height);
	}
	for (int i = 0; i < PaintBox1->Height; i += 50) {
		PaintBox1->Canvas->MoveTo(0, i);
		PaintBox1->Canvas->LineTo(PaintBox1->Width, i);
	}

	PaintBox1->Canvas->Pen->Style = psSolid;
	PaintBox1->Canvas->Brush->Color = clWhite;

	PaintBox1->Canvas->Brush->Color = clRed;
	for (int i = 0; i < points.size(); i++) {
		PaintBox1->Canvas->Ellipse(points[i].x-2.5, points[i].y-2.5, points[i].x+2.5, points[i].y+2.5);
	}
	/*
	PaintBox1->Canvas->Brush->Color = clGreen;
	for (int i = 0; i < pointsInCirc.size(); i++) {
		PaintBox1->Canvas->Ellipse(pointsInCirc[i].x-2.5, pointsInCirc[i].y-2.5, pointsInCirc[i].x+2.5, pointsInCirc[i].y+2.5);
	}

	PaintBox1->Canvas->MoveTo(p1.x, p1.y);
	PaintBox1->Canvas->LineTo(p2.x, p2.y);

	////////////////////////////////////
	if (p2.x - p1.x != 0 || p2.y - p1.y != 0) {
		vector<int> pVec = {p2.x - p1.x, p2.y - p1.y};
		vector<float> unitPVec = {pVec[0]/Hype(pVec[0], pVec[1]), pVec[1]/Hype(pVec[0], pVec[1])};

		PaintBox1->Canvas->MoveTo(p1.x, p1.y);
		PaintBox1->Canvas->LineTo(p2.x+unitPVec[0]*PaintBox1->Width*scale, p2.y+unitPVec[1]*PaintBox1->Width*scale);
		PaintBox1->Canvas->MoveTo(p2.x, p2.y);
		PaintBox1->Canvas->LineTo(p1.x-unitPVec[0]*PaintBox1->Width*scale, p1.y-unitPVec[1]*PaintBox1->Width*scale);
	}
	////////////////////////////////////
	PaintBox1->Canvas->Brush->Color = clYellow;
	PaintBox1->Canvas->Ellipse(p1.x-5*scale, p1.y-5*scale, p1.x+5*scale, p1.y+5*scale);
	PaintBox1->Canvas->Ellipse(p2.x-5*scale, p2.y-5*scale, p2.x+5*scale, p2.y+5*scale);

	PaintBox1->Canvas->MoveTo((0 - offsetX)*scale, (0 - offsetY)*scale);
	PaintBox1->Canvas->LineTo((PaintBox1->Width - offsetX)*scale, (0 - offsetY)*scale);

	PaintBox1->Canvas->MoveTo((PaintBox1->Width - offsetX)*scale, (0 - offsetY)*scale);
	PaintBox1->Canvas->LineTo((PaintBox1->Width - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);

	PaintBox1->Canvas->MoveTo((PaintBox1->Width - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);
	PaintBox1->Canvas->LineTo((0 - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);

	PaintBox1->Canvas->MoveTo((0 - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);
	PaintBox1->Canvas->LineTo((0 - offsetX)*scale, (0 - offsetY)*scale);*/
}

void __fastcall TForm5::ButtonEnterCoordinateClick(TObject *Sender)
{
	TPoint p;
	p.x = StrToInt(EditX->Text);
	p.y = StrToInt(EditY->Text);
	if((p.x >= 0 && p.x <= PaintBox1->Width) && (p.y >= 0 && p.y <= PaintBox1->Height))
	{
		points.push_back(p); PaintBox1->Repaint(); Draw(PaintBox1);
	}
	else
	{
		ShowMessage("Var2");
	}
	StaticTextPoint1X->Caption = "";
	 StaticTextPoint1Y->Caption = "";

	StaticTextPoint2X->Caption = "";
	StaticTextPoint2Y->Caption = "";

	StaticTextPoint3X->Caption = "";
	StaticTextPoint3Y->Caption = "";

	StaticTextSCircle->Caption = "";
	StaticTextSTriangle->Caption = "";
	StaticTextSDifference->Caption = "";
	trianglExists = false;
}
//---------------------------------------------------------------------------

void __fastcall TForm5::ButtonClearClick(TObject *Sender)
{
	points.clear(); PaintBox1->Repaint(); pointNumber[0] = 0; pointNumber[1] = 1; pointNumber[2] = 2;
	 Draw(PaintBox1);

     StaticTextPoint1X->Caption = "";
	 StaticTextPoint1Y->Caption = "";

	StaticTextPoint2X->Caption = "";
	StaticTextPoint2Y->Caption = "";

	StaticTextPoint3X->Caption = "";
	StaticTextPoint3Y->Caption = "";

	StaticTextSCircle->Caption = "";
	StaticTextSTriangle->Caption = "";
	StaticTextSDifference->Caption = "";
	trianglExists = false;
}
//---------------------------------------------------------------------------


void __fastcall TForm5::ButtonLogicClick(TObject *Sender)
{
	if (points.size()>=3) {


	PaintBox1->Repaint();
	Draw(PaintBox1);
	Logic(PaintBox1, points);
	if (trianglExists) {
		double sCircle = abs(S_circle(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]));
		double sTriangle = abs(S_triangl(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]));
		StaticTextPoint1X->Caption = points[pointNumber[0]].X;
		StaticTextPoint1Y->Caption = points[pointNumber[0]].Y;

		StaticTextPoint2X->Caption = points[pointNumber[1]].X;
		StaticTextPoint2Y->Caption = points[pointNumber[1]].Y;

		StaticTextPoint3X->Caption = points[pointNumber[2]].X;
		StaticTextPoint3Y->Caption = points[pointNumber[2]].Y;

		StaticTextSCircle->Caption = sCircle;
		StaticTextSTriangle->Caption = sTriangle;
		StaticTextSDifference->Caption = sCircle - sTriangle;
		}
	
	}
}
//---------------------------------------------------------------------------


void __fastcall TForm5::ButtonTaskClick(TObject *Sender)
{
    ShowMessage("Var2");
}
//---------------------------------------------------------------------------

=======
//---------------------------------------------------------------------------

#include<vcl.h>
#include<vector>
#include<random>
#include<time.h>
#include<cmath>
#pragma hdrstop
#include <string>
#include <iostream>


using namespace std;
#define M_PI 3.14159265358979323846

#include "Unit5.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm5 *Form5;
//---------------------------------------------------------------------------
__fastcall TForm5::TForm5(TComponent* Owner)
	: TForm(Owner)
{
StaticTextPoint1X->Caption = "";
StaticTextPoint1Y->Caption = "";

StaticTextPoint2X->Caption = "";
StaticTextPoint2Y->Caption = "";

StaticTextPoint3X->Caption = "";
StaticTextPoint3Y->Caption = "";

StaticTextSCircle->Caption = "";
StaticTextSTriangle->Caption = "";
StaticTextSDifference->Caption = "";
}

double minRaz;
unsigned short pointNumber[3] = {0, 1, 2};
bool trianglExists = false;
int N = 0;
vector<TPoint> points;



void __fastcall TForm5::PaintBox1MouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
	   /*	if (Button == mbLeft) {
			points[N].x = X;
			points[N].y = Y;
			N++;
			EditX->Text = PaintBox1->Height;
			EditY->Text = PaintBox1->Width;
		}*/
}
//---------------------------------------------------------------------------

double line(TPoint point1, TPoint point2)
{
    return sqrt(pow((point1.x - point2.x), 2) + pow((point1.y - point2.y), 2));
}

double S_circle(TPoint point1, TPoint point2, TPoint point3)
{
	double lineA = line(point1, point2);
	double lineB = line(point1, point3);
	double lineC = line(point2, point3);
	double halfPerim = (lineA + lineB + lineC) / 2;
	double R = (lineA * lineB * lineC) / (4 * sqrt(halfPerim * (halfPerim - lineA) * (halfPerim - lineB) * (halfPerim - lineC)));
    return M_PI * pow(R, 2);
}

double S_triangl(TPoint point1, TPoint point2, TPoint point3)
{
	TPoint vectAB; vectAB.x = point2.x - point1.x; vectAB.y = point2.y - point1.y;
	TPoint vectAC; vectAC.x = point3.x - point1.x; vectAC.y = point3.y - point1.y;
    return abs((vectAB.x * vectAC.y - vectAC.x * vectAB.y)) / 2;
}

void DrawCircle(TPaintBox *PaintBox1, TPoint point1, TPoint point2, TPoint point3)
{
	double Ax = point2.x - point1.x;
	double Ay = point2.y - point1.y;
	double Bx = point3.x - point1.x;
	double By = point3.y - point1.y;
	double E = Ax * (point1.x + point2.x) + Ay * (point1.y + point2.y);
	double F = Bx * (point1.x + point3.x) + By * (point1.y + point3.y);
	double G = 2 * (Ax * (point3.y - point2.y) - Ay * (point3.x- point2.x));
	double Cx = (By * E - Ay * F) / G;
	double Cy = (Ax * F - Bx * E) / G;
	double R = sqrt(pow(point1.x - Cx, 2) + pow(point1.y - Cy, 2));

	PaintBox1->Canvas->Pen->Style = psSolid;
	PaintBox1->Canvas->MoveTo(Cx+R, Cy);
	PaintBox1->Canvas->AngleArc(Cx, Cy, R, 0, 360);
}

void Logic(TPaintBox *PaintBox1, vector<TPoint> points) {
	 if (points.size() >= 3) {
	 PaintBox1->Canvas->Pen->Color = clRed;
		minRaz = abs(S_circle(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]) - S_triangl(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]));
		for (int i = 0; i < points.size(); i++) {
			for (int j = i+1; j < points.size(); j++) {
				for (int i1 = j+1; i1 < points.size(); i1++) {
					if (S_triangl(points[i], points[j], points[i1]) <= 0)
					{
						//std::cout << "Треугольник и круг по данным точкам не существуют\n";
						continue;
					}

					if (abs(S_circle(points[i], points[j], points[i1]) - S_triangl(points[i], points[j], points[i1])) < minRaz)
					{
						double circle = S_circle(points[i], points[j], points[i1]);
						double triangle = S_triangl(points[i], points[j], points[i1]);
						minRaz = abs(circle - triangle);
						cout<<minRaz;
						cout<<abs(S_circle(points[i], points[j], points[i1]) - S_triangl(points[i], points[j], points[i1]));
						pointNumber[0] = i;
						pointNumber[1] = j;
						pointNumber[2] = i1;

					}

					DrawCircle(PaintBox1, points[i], points[j], points[i1]);
					PaintBox1->Canvas->MoveTo(points[i].x, points[i].y);
					PaintBox1->Canvas->LineTo(points[j].x, points[j].y);
					PaintBox1->Canvas->LineTo(points[i1].x, points[i1].y);
					PaintBox1->Canvas->LineTo(points[i].x, points[i].y);
					trianglExists = true;
				}
			}
		}
	 }

	 if(trianglExists)
	 {

		PaintBox1->Canvas->Pen->Color = clGreen;
		DrawCircle(PaintBox1, points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]);
		PaintBox1->Canvas->MoveTo(points[pointNumber[0]].x, points[pointNumber[0]].y);
		PaintBox1->Canvas->LineTo(points[pointNumber[1]].x, points[pointNumber[1]].y);
		PaintBox1->Canvas->LineTo(points[pointNumber[2]].x, points[pointNumber[2]].y);
		PaintBox1->Canvas->LineTo(points[pointNumber[0]].x, points[pointNumber[0]].y);

	 }
}

void Draw(TPaintBox *PaintBox1) {
	PaintBox1->Canvas->Brush->Color = clWhite;
	PaintBox1->Canvas->Pen->Style = psDot;
    PaintBox1->Canvas->Pen->Color = clBlack;
	for (int i = 0; i < PaintBox1->Width; i += 50) {
		PaintBox1->Canvas->MoveTo(i, 0);
		PaintBox1->Canvas->LineTo(i, PaintBox1->Height);
	}
	for (int i = 0; i < PaintBox1->Height; i += 50) {
		PaintBox1->Canvas->MoveTo(0, i);
		PaintBox1->Canvas->LineTo(PaintBox1->Width, i);
	}

	PaintBox1->Canvas->Pen->Style = psSolid;
	PaintBox1->Canvas->Brush->Color = clWhite;

	PaintBox1->Canvas->Brush->Color = clRed;
	for (int i = 0; i < points.size(); i++) {
		PaintBox1->Canvas->Ellipse(points[i].x-2.5, points[i].y-2.5, points[i].x+2.5, points[i].y+2.5);
	}
	/*
	PaintBox1->Canvas->Brush->Color = clGreen;
	for (int i = 0; i < pointsInCirc.size(); i++) {
		PaintBox1->Canvas->Ellipse(pointsInCirc[i].x-2.5, pointsInCirc[i].y-2.5, pointsInCirc[i].x+2.5, pointsInCirc[i].y+2.5);
	}

	PaintBox1->Canvas->MoveTo(p1.x, p1.y);
	PaintBox1->Canvas->LineTo(p2.x, p2.y);

	////////////////////////////////////
	if (p2.x - p1.x != 0 || p2.y - p1.y != 0) {
		vector<int> pVec = {p2.x - p1.x, p2.y - p1.y};
		vector<float> unitPVec = {pVec[0]/Hype(pVec[0], pVec[1]), pVec[1]/Hype(pVec[0], pVec[1])};

		PaintBox1->Canvas->MoveTo(p1.x, p1.y);
		PaintBox1->Canvas->LineTo(p2.x+unitPVec[0]*PaintBox1->Width*scale, p2.y+unitPVec[1]*PaintBox1->Width*scale);
		PaintBox1->Canvas->MoveTo(p2.x, p2.y);
		PaintBox1->Canvas->LineTo(p1.x-unitPVec[0]*PaintBox1->Width*scale, p1.y-unitPVec[1]*PaintBox1->Width*scale);
	}
	////////////////////////////////////
	PaintBox1->Canvas->Brush->Color = clYellow;
	PaintBox1->Canvas->Ellipse(p1.x-5*scale, p1.y-5*scale, p1.x+5*scale, p1.y+5*scale);
	PaintBox1->Canvas->Ellipse(p2.x-5*scale, p2.y-5*scale, p2.x+5*scale, p2.y+5*scale);

	PaintBox1->Canvas->MoveTo((0 - offsetX)*scale, (0 - offsetY)*scale);
	PaintBox1->Canvas->LineTo((PaintBox1->Width - offsetX)*scale, (0 - offsetY)*scale);

	PaintBox1->Canvas->MoveTo((PaintBox1->Width - offsetX)*scale, (0 - offsetY)*scale);
	PaintBox1->Canvas->LineTo((PaintBox1->Width - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);

	PaintBox1->Canvas->MoveTo((PaintBox1->Width - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);
	PaintBox1->Canvas->LineTo((0 - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);

	PaintBox1->Canvas->MoveTo((0 - offsetX)*scale, (PaintBox1->Height - offsetY)*scale);
	PaintBox1->Canvas->LineTo((0 - offsetX)*scale, (0 - offsetY)*scale);*/
}

void __fastcall TForm5::ButtonEnterCoordinateClick(TObject *Sender)
{
	TPoint p;
	p.x = StrToInt(EditX->Text);
	p.y = StrToInt(EditY->Text);
	if((p.x >= 0 && p.x <= PaintBox1->Width) && (p.y >= 0 && p.y <= PaintBox1->Height))
	{
		points.push_back(p); PaintBox1->Repaint(); Draw(PaintBox1);
	}
	else
	{
		ShowMessage("Var2");
	}
	StaticTextPoint1X->Caption = "";
	 StaticTextPoint1Y->Caption = "";

	StaticTextPoint2X->Caption = "";
	StaticTextPoint2Y->Caption = "";

	StaticTextPoint3X->Caption = "";
	StaticTextPoint3Y->Caption = "";

	StaticTextSCircle->Caption = "";
	StaticTextSTriangle->Caption = "";
	StaticTextSDifference->Caption = "";
	trianglExists = false;
}
//---------------------------------------------------------------------------

void __fastcall TForm5::ButtonClearClick(TObject *Sender)
{
	points.clear(); PaintBox1->Repaint(); pointNumber[0] = 0; pointNumber[1] = 1; pointNumber[2] = 2;
	 Draw(PaintBox1);

     StaticTextPoint1X->Caption = "";
	 StaticTextPoint1Y->Caption = "";

	StaticTextPoint2X->Caption = "";
	StaticTextPoint2Y->Caption = "";

	StaticTextPoint3X->Caption = "";
	StaticTextPoint3Y->Caption = "";

	StaticTextSCircle->Caption = "";
	StaticTextSTriangle->Caption = "";
	StaticTextSDifference->Caption = "";
	trianglExists = false;
}
//---------------------------------------------------------------------------


void __fastcall TForm5::ButtonLogicClick(TObject *Sender)
{
	if (points.size()>=3) {


	PaintBox1->Repaint();
	Draw(PaintBox1);
	Logic(PaintBox1, points);
	if (trianglExists) {
		double sCircle = abs(S_circle(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]));
		double sTriangle = abs(S_triangl(points[pointNumber[0]], points[pointNumber[1]], points[pointNumber[2]]));
		StaticTextPoint1X->Caption = points[pointNumber[0]].X;
		StaticTextPoint1Y->Caption = points[pointNumber[0]].Y;

		StaticTextPoint2X->Caption = points[pointNumber[1]].X;
		StaticTextPoint2Y->Caption = points[pointNumber[1]].Y;

		StaticTextPoint3X->Caption = points[pointNumber[2]].X;
		StaticTextPoint3Y->Caption = points[pointNumber[2]].Y;

		StaticTextSCircle->Caption = sCircle;
		StaticTextSTriangle->Caption = sTriangle;
		StaticTextSDifference->Caption = sCircle - sTriangle;
		}
	
	}
}
//---------------------------------------------------------------------------


void __fastcall TForm5::ButtonTaskClick(TObject *Sender)
{
    ShowMessage("Var2");
}
//---------------------------------------------------------------------------

>>>>>>> Stashed changes
